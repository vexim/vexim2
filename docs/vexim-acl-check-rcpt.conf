# Use spfquery to perform a pair of SPF checks (for details, see
# http://www.openspf.org/)
# This check has been copied from a stock Debian config and has not been
# tested, that's why it's commented out.
#
# This is quite costly in terms of DNS lookups (~6 lookups per mail).  Do not
# enable if that's an issue.  Also note that if you enable this, you must
# install "spf-tools-perl" which provides the spfquery command.
# Missing spf-tools-perl will trigger the "Unexpected error in
# SPF check" warning.
#  deny
#    message = [SPF] $sender_host_address is not allowed to send mail from \
#              ${if def:sender_address_domain {$sender_address_domain}{$sender_helo_name}}.  \
#              Please see \
#              http://www.openspf.org/Why?scope=${if def:sender_address_domain \
#              {mfrom}{helo}};identity=${if def:sender_address_domain \
#              {$sender_address}{$sender_helo_name}};ip=$sender_host_address
#    log_message = SPF check failed.
#    !acl = acl_local_deny_exceptions
#    condition = ${run{/usr/bin/spfquery.mail-spf-perl --ip \
#                   \"$sender_host_address\" --identity \
#                   ${if def:sender_address_domain \
#                       {--scope mfrom  --identity \"$sender_address\"}\
#                       {--scope helo --identity  \"$sender_helo_name\"}}}\
#                   {no}{${if eq {$runrc}{1}{yes}{no}}}}
#  defer
#    message = Temporary DNS error while checking SPF record.  Try again later.
#    !acl = acl_local_deny_exceptions
#    condition = ${if eq {$runrc}{5}{yes}{no}}
#
#  warn
#    condition = ${if <={$runrc}{6}{yes}{no}}
#    message = Received-SPF: ${if eq {$runrc}{0}{pass}\
#                                {${if eq {$runrc}{2}{softfail}\
#                                 {${if eq {$runrc}{3}{neutral}\
#                                  {${if eq {$runrc}{4}{permerror}\
#                                   {${if eq {$runrc}{6}{none}{error}}}}}}}}}\
#                                } client-ip=$sender_host_address; \
#                                ${if def:sender_address_domain \
#                                   {envelope-from=${sender_address}; }{}}\
#                                helo=$sender_helo_name
#
#  warn
#    log_message = Unexpected error in SPF check.
#    condition = ${if >{$runrc}{6}{yes}{no}}



#  deny    hosts         = ! +relay_from_hosts
#          condition     = ${if eq \
#                            {1} \
#                            {${lookup mysql{ \
#                              SELECT COUNT(*) \
#                              FROM domains \
#                              WHERE domain = '${quote_mysql:$domain}' \
#                                AND spamassassin='1' \
#                            }}} \
#                            {yes}{no}}
#          !acl          = spf_rcpt_acl


.ifdef CHECK_RCPT_REVERSE_DNS
  warn message           = Warning - Reverse DNS lookup failed for host $sender_host_address.
         !authenticated  = *
         !verify         = reverse_host_lookup
.endif


# Deny unless the sender address can be verified.
# require verify        = sender


# To use a DNSBL the best would be to set up a caching dns server (e.g. unbound) because there is
# often a rate limit that you will hit when using public DNS servers.
  deny    message       = DNSBL listed at $dnslist_domain\n$dnslist_text
          dnslists      = zen.spamhaus.org:ix.dnsbl.manitu.net
